// Mocks generated by Mockito 5.0.16 from annotations
// in nfadhil_blog/test/data/repositories/blog/blog_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nfadhil_blog/core/platform/network_info.dart' as _i6;
import 'package:nfadhil_blog/data/local/datasources/abstract/blog_local_data_source.dart'
    as _i5;
import 'package:nfadhil_blog/data/remote/datasources/abstract/blog_network_data_source.dart'
    as _i3;
import 'package:nfadhil_blog/domain/entities/blog.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBlog_0 extends _i1.Fake implements _i2.Blog {}

/// A class which mocks [BlogNetworkDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogNetworkDataSource extends _i1.Mock
    implements _i3.BlogNetworkDataSource {
  MockBlogNetworkDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Blog>> getAllBlog({String? searchKey = r''}) =>
      (super.noSuchMethod(
              Invocation.method(#getAllBlog, [], {#searchKey: searchKey}),
              returnValue: Future<List<_i2.Blog>>.value(<_i2.Blog>[]))
          as _i4.Future<List<_i2.Blog>>);
  @override
  _i4.Future<_i2.Blog> getOneBlogById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getOneBlogById, [id]),
              returnValue: Future<_i2.Blog>.value(_FakeBlog_0()))
          as _i4.Future<_i2.Blog>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BlogLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogLocalDataSource extends _i1.Mock
    implements _i5.BlogLocalDataSource {
  MockBlogLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addNewBlog(_i2.Blog? blogEntity) =>
      (super.noSuchMethod(Invocation.method(#addNewBlog, [blogEntity]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addBunchOfBlog(List<_i2.Blog>? blogEntityList) =>
      (super.noSuchMethod(Invocation.method(#addBunchOfBlog, [blogEntityList]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i2.Blog>> getAllBlog() =>
      (super.noSuchMethod(Invocation.method(#getAllBlog, []),
              returnValue: Future<List<_i2.Blog>>.value(<_i2.Blog>[]))
          as _i4.Future<List<_i2.Blog>>);
  @override
  _i4.Future<_i2.Blog> getBlogById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getBlogById, [id]),
              returnValue: Future<_i2.Blog>.value(_FakeBlog_0()))
          as _i4.Future<_i2.Blog>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  String toString() => super.toString();
}
